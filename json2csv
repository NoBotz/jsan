#! /usr/bin/env Rscript
####################################################################
##
## json2csv: Slice and Convert JSON to CSV
## Copyright (C) 2015  Nicholas M. Van Horn
## 
##  This program is free software: you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation, either version 3 of the License, or
##  (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with this program.  If not, see <http://www.gnu.org/licenses/>.
##
## 1.0.0 2015-02-23: Initial version.
##
## Instructions: This script allows you to convert very large (any
## size) json files to csv files with very little memory usage. You
## can optionally simultaneously slice/subset the data during
## conversion. This allows you to often greatly reduce the final file
## size by keeping only those data fields necessary.
##
## Example usage:
##
## To convert the file mydata.json to mydata.csv:
##
##     ./json2csv mydata.json
##
## To convert AND only keep the data fields "text" and "created_on":
##
##     ./json2csv mydata.json text created_on
##
## To remove data fields, preface field names with a "-". The
## following will keep all fields EXCEPT "user" and "address": 
##
##     ./json2csv mydata.json -user -address
##

## Required packages
deps = c("tools", "plyr", "jsonlite")

## Vector of installed packages
allPkg = installed.packages()[,1]
## Check if dependencies are installed
is_installed = sapply(deps, function(x) is.element(x,
    allPkg))

## Exit and warn if dependencies are not installed
if (!all(is_installed)) {
  cat('Dependencies missing!',
      'You must install the following R packages',
      'before continuing: ',
      paste(deps[!is_installed], collapse=', '),
      'This can be done by running the following from the command line:\n',
      paste("Rscript -e 'install.packages(", "c(\"",
                paste(deps[!is_installed], collapse="\",\""), "\")",
                ", repos = \"http://cran.us.r-project.org\")'",
            sep=""),
      "\n",
      sep = "\n")
  stop('Please install dependencies before continuing',
       call. = FALSE)
}

suppressPackageStartupMessages(require(tools))
suppressPackageStartupMessages(require(plyr))
suppressPackageStartupMessages(require(jsonlite))

## We allow input args to control which fields in the json file to
## retain as CSV columns
args = commandArgs(TRUE)

## Input file
jsonFile = args[1]
## Exit with warning if input file does not exist
if (!file.exists(jsonFile)) {
    stop(sprintf('File %s not found\n', jsonFile), call.=FALSE)
}

## Remaining user command line args
dataArgs = args[-1]

## The user can request data fields by name, or can ask for data
## fields to be removed by preceding them with a "-". Separate those
## requests here
idx = which(substr(dataArgs, 1, 1) == "-")

## Requested data fields
## dataFields = dataArgs[-idx]
dataFields = dataArgs[setdiff(1:(length(dataArgs)), idx)]

## Data fields to be removed
removeFields = substring(dataArgs[idx], 2)

## In the odd case that the user has requested a field to both keep
## and strip, we strip. Also, we tidy up some edge conditions for
## errors due to weird combinations of dataFields and removeFields
if (length(dataArgs) == 0) {
    dataFields = character(0)
} else {
    dataFields = setdiff(dataFields, removeFields)
}

if (class(dataFields) == "NULL") {
    dataFields = character(0)
} 

## Output csv file name
outFile = file.path(dirname(jsonFile),
    paste(basename(file_path_sans_ext(jsonFile)), ".csv", sep=""))
## Exit if output file exists
if (file.exists(outFile)) {
    stop(sprintf('Output file %s already exists\n', outFile),
         call.=FALSE)
}

## This is the handler function for writing the json file lines to csv.
writeCSV <- function(df, file.name = outFile, requestedFields =
                         dataFields, stripFields = removeFields) {

    ## Available data fields
    availableFields = names(df)   

    ## If user has asked for specific data fields, we attempt to
    ## subset now
    if (length(requestedFields) > 0) {
        ## If the user has asked for data fields that do not exist, exit
        ## and warn
        tmp = requestedFields %in% availableFields

        if (!all(tmp)) {
            cat("\nRequested data fields not available:",
                paste(requestedFields[which(!tmp %in% availableFields)],
                      collapse = " "), sep = "\n")
            stop("Please enter valid data fields", call. = FALSE)
        }

        ## If we made it here, we're ready to subset the data
        df = data.frame(df[, requestedFields])
        colnames(df) = requestedFields
    }

    ## If the user has asked for fields to be removed, we remove them
    ## now.
    if (length(stripFields) > 0) {

        ## Update available data fields
        availableFields = names(df)   

        ## If the user has asked for data fields that do not exist,
        ## warn them, but keep going
        idx = stripFields %in% availableFields

        if (!all(idx)) {
            cat("Some fields requested for removal do not exist:",
                paste(stripFields[!idx],
                      collapse = " "),
                "Continuing anyway...\n", sep="\n")
        }

        ## Remove unwanted data fields
        ## df = df[, !names(df) %in% stripFields]
        df = df[, setdiff(availableFields, stripFields)]
    }

    ## Update available data fields
    availableFields = names(df)   

    ## Currently, json2csv does not handle nested json. Stop and warn
    ## the user and display command for removing nested fields
    isNested = as.vector(sapply(availableFields, 
        function(x) class(df[,x]) == "data.frame"))

    if (any(isNested)) {
        cat("\njson2csv currently does not support nested json entries",
            "Rerun by removing offending data fields from extraction.",
            "\nFor example, this can be accomplished with your data by running:",
            paste("\njson2csv ", jsonFile, " ",
                  paste("-", 
                        union(stripFields, availableFields[isNested]), sep="",
                        collapse = " "), "\n", sep=""),
            sep = "\n")
        stop("json2csv stopped", call. = FALSE)
    }
    
    ## Everything is ready for writing. Get down to business
    if (file.exists(file.name)) {
        ## Write data with NO header
        write.table(df,
            file = file.name, row.names=FALSE, 
            sep= ",", append=TRUE, col.names=FALSE) 
    } else {
        ## Creating file for the first time. Add a csv header line
        write.table(df,
            file = file.name, row.names=FALSE, 
            sep= ",", append = FALSE, col.names = TRUE)
    }
} ## End of function writeCSV


## #####################################################################
## Parse json
## #####################################################################

## This does the heavy lifting, using the writeCSV function as the
## handler on each chunck of 500 json entries

## Returns nothing
stream_in(file(jsonFile), handler = 
              function(d) {writeCSV(d, outFile, dataFields, removeFields)}, 
          pagesize=500, verbose=FALSE)


## End of file json2csv
